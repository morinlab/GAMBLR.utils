% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gistic_to_cn_matrix.R
\name{gistic_to_cn_matrix}
\alias{gistic_to_cn_matrix}
\title{Make a binary CN matrix in GISTIC regions using segmented data}
\usage{
gistic_to_cn_matrix(
  gistic_lesions_file,
  these_samples_metadata,
  seg_data,
  wide_peaks = FALSE,
  max_CN = 6,
  drop_inconsistent = TRUE,
  as_binary = TRUE,
  scale_by_sample = TRUE,
  missing_data_as_diploid = TRUE,
  genome_build
)
}
\arguments{
\item{gistic_lesions_file}{The all_lesions output file from GISTIC from the same pathology you are working on}

\item{these_samples_metadata}{Optional metadata that will be used to subset your segment data to only overlapping samples}

\item{seg_data}{Data frame containing segmented copy number data (i.e. seg format)}

\item{wide_peaks}{Whether to use wide peaks instead of narrow peaks (FALSE)}

\item{max_CN}{Maximum value where CN will be truncated to limit the range}

\item{drop_inconsistent}{Set regions with a CN direction inconsistent with peak type to neutral/diploid}

\item{as_binary}{One-hot encoding (0 = no CN, 1 = CN)}

\item{scale_by_sample}{Adjust for overall ploidy of each sample. Default (TRUE) is a close approximation to what GISTIC reports}

\item{missing_data_as_diploid}{Fill in gaps as diploid}
}
\value{
a list of data frames
}
\description{
Make a binary CN matrix in GISTIC regions using segmented data
}
\examples{

all_segments = get_cn_segments()
dlbcl_genomes_meta = get_gambl_metadata() \%>\% 
    dplyr::filter(pathology=="DLBCL",seq_type=="genome")
    
all_out = gistic_to_cn_matrix("all_lesions.conf_90.txt",
                              dlbcl_genomes_meta, #only segments for samples in this file will be used
                              all_segments,
                              as_binary = T,
                              scale_by_sample = T)
                              
gambl_cn_matrix_gistic_peaks = all_out$gambl_cn_matrix \%>\% rownames_to_column("sample_id")

prettyForestPlot(mutmat=gambl_cn_matrix_gistic_peaks, 
                        metadata=dlbcl_genomes_meta,
                        comparison_column = "COO_consensus",
                        comparison_values = c("GCB","ABC"))

}
