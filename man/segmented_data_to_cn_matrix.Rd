% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/segmented_data_to_cn_matrix.R
\name{segmented_data_to_cn_matrix}
\alias{segmented_data_to_cn_matrix}
\title{Segmented data to CN matrix}
\usage{
segmented_data_to_cn_matrix(
  seg_data,
  strategy = "auto_split",
  regions,
  these_samples_metadata,
  n_bins_split = 1000,
  use_cytoband_name = FALSE,
  missing_data_as_diploid = FALSE,
  adjust_for_ploidy = FALSE,
  genome_build
)
}
\arguments{
\item{seg_data}{A data frame of segments that will be used to infer the copy number state of each region}

\item{strategy}{The general strategy to define regions. Available options are: 'custom_regions','auto_split','cytobands','GISTIC'}

\item{regions}{Required when strategy is set to 'custom_regions'. A data frame in bed-like format or a vector of regions in the format "chrom:start-end"}

\item{these_samples_metadata}{Optional metadata table to auto-subset the data to samples in that table before returning. If missing, the result will include a row for every sample in seg_data.}

\item{n_bins_split}{Split genome into N equally sized bins}

\item{use_cytoband_name}{Use cytoband names instead of region names, e.g p36.33.}

\item{missing_data_as_diploid}{Fill in any sample/region combinations with missing data as diploid (e.g., CN state like 2). Default is FALSE.}

\item{genome_build}{Specify the genome build (usually not required)}
}
\value{
Copy number matrix with sample_id as rows and regions as columns.
}
\description{
Convert segmented data to a matrix of CN States for a set of regions.
}
\details{
This function returns CN states for the specified regions using the CN data in seg_data and (optionally) assumes regions with no data are diploid.
For how to determine/specify the coordinates of each region, refer to the parameter descriptions and examples.
}
\examples{


dlbcl_genome_meta = get_gambl_metadata() \%>\%
    filter(pathology=="DLBCL",
    seq_type=="genome")
# Create the copy number matrix from this data
all_segments = get_cn_segments()
all_states_binned = segmented_data_to_cn_matrix(
                                  seg_data = all_segments,
                                  strategy="auto_split",
                                  n_bins_split=2500,
                                  missing_data_as_diploid = T,
                                  these_samples_metadata = dlbcl_genome_meta)



}
